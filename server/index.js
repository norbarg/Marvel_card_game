// server/index.js
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const path = require('path');
const jwt = require('jsonwebtoken');
const dbPool = require('./config/db');
const config = require('./config/config.json');
const authRoutes = require('./routes/auth');

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: { origin: config.server.corsOrigin, methods: ['GET', 'POST'] },
});

// —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –æ–±—ã—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.use(express.json());
app.use(express.static(path.join(__dirname, '../client')));
app.get('/', (req, res) =>
    res.sendFile(path.join(__dirname, '../client/pages/registration.html'))
);
app.get('/lobby.html', (req, res) =>
    res.sendFile(path.join(__dirname, '../client/pages/lobby.html'))
);
app.get('/game.html', (req, res) =>
    res.sendFile(path.join(__dirname, '../client/pages/game.html'))
);

app.use('/auth', authRoutes);
app.get('/health', (req, res) => res.json({ status: 'ok' }));

// –º–∞–ø—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∏–∫—É –∏ –ø–æ userId
const socketsByNickname = new Map(); // nickname -> socket.id
const socketsByUserId = new Map(); // userId   -> socket.id
const readyMap = new Map(); // sessionId -> Set<userId>
const sessionPlayers = new Map(); // sessionId ‚Üí [player1_id, player2_id]
const sessionDraftData = new Map(); //  sessionId ‚Üí { cardPool, firstPlayerId }
const gameStates = new Map();

io.use(async (socket, next) => {
    const token = socket.handshake.auth.token;
    if (!token) return next(new Error('Unauthorized'));
    try {
        const payload = jwt.verify(token, config.server.jwtSecret);
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º avatar_url
        const [[{ avatar_url }]] = await dbPool.query(
            'SELECT avatar_url FROM users WHERE user_id = ?',
            [payload.userId]
        );
        socket.user = {
            userId: payload.userId,
            nickname: payload.nickname,
            avatar_url,
        };
        next();
    } catch (err) {
        next(new Error('Unauthorized'));
    }
});
function endTurn(sessionId, playerId) {
    const state = gameStates.get(sessionId);
    if (!state || state.currentTurn !== playerId) return;

    // 1) –°–±—Ä–æ—Å —Ç–∞–π–º–∞—É—Ç–∞
    clearTimeout(state.turnTimeout);
    state.turnTimeout = null;

    // 2) –ë–µ—Ä—ë–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ sessionPlayers
    const playersArr = sessionPlayers.get(sessionId);
    if (!playersArr) {
        console.warn(`No sessionPlayers for session ${sessionId}`);
        return;
    }
    const [p1, p2] = playersArr;

    // 3) –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    state.currentTurn = state.currentTurn === p1 ? p2 : p1;

    // 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–∞ –ª–∏ —Å—Ö–æ–¥–∏–ª–∏ (—Ç–æ–≥–¥–∞ –±–∏—Ç–≤–∞) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ
    const firstMover = state.round % 2 === 1 ? p1 : p2;
    if (state.currentTurn === firstMover) {
        resolveBattle(sessionId);
    } else {
        startTurn(sessionId);
    }
}

function startTurn(sessionId) {
    const state = gameStates.get(sessionId);
    if (!state) return;
    const turnPlayer = state.currentTurn;
    // —à–ª—ë–º —Å–æ–±—ã—Ç–∏–µ startTurn —Ç–æ–º—É, —á–µ–π —Ö–æ–¥:
    const socketId = socketsByUserId.get(turnPlayer);
    io.to(socketId).emit('yourTurn', {
        crystals: state.players[turnPlayer].crystals,
        time: 30,
    });
    // –æ—Å—Ç–∞–ª—å–Ω—ã–º ‚Äì opponentTurn
    const other = Object.keys(state.players).find((id) => id != turnPlayer);
    const otherSocketId = socketsByUserId.get(+other);
    io.to(otherSocketId).emit('opponentTurn', { time: 30 });

    // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –±—ã–ª —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–∞—É—Ç
    if (state.turnTimeout) clearTimeout(state.turnTimeout);
    state.turnTimeout = setTimeout(() => {
        // –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ —É—Å–ø–µ–ª ‚Äì –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ö–æ–¥
        endTurn(sessionId, turnPlayer);
    }, 30_000);
}
function resolveBattle(sessionId) {
    const state = gameStates.get(sessionId);
    const [p1, p2] = sessionPlayers.get(sessionId);
    const A = state.players[p1],
        B = state.players[p2];
    // —Å–Ω–∞—á–∞–ª–∞ —à–ª—ë–º –≤—Å–µ–º reveal –∫–∞—Ä—Ç
    io.to(sessionId).emit('revealCards', {
        [p1]: A.field,
        [p2]: B.field,
    });
    // –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ 5 —Å–ª–æ—Ç–æ–≤
    for (let i = 0; i < 5; i++) {
        let cardA = A.field[i],
            cardB = B.field[i];
        if (cardA && cardB) {
            // –±–æ–π –∫–∞—Ä—Ç
            while (cardA && cardB) {
                cardB.defense -= cardA.attack;
                if (cardB.defense <= 0) {
                    const over = -cardB.defense;
                    B.hp = Math.max(B.hp - over, 0);
                    B.field[i] = null;
                    cardB = null;
                    break;
                }
                cardA.defense -= cardB.attack;
                if (cardA.defense <= 0) {
                    const over = -cardA.defense;
                    A.hp = Math.max(A.hp - over, 0);
                    A.field[i] = null;
                    cardA = null;
                    break;
                }
            }
        } else if (cardA && !cardB) {
            B.hp = Math.max(B.hp - cardA.attack, 0);
        } else if (!cardA && cardB) {
            A.hp = Math.max(A.hp - cardB.attack, 0);
        }
    }

    // –ø–æ—Å–ª–µ –±–æ—è
    io.to(sessionId).emit('battleResult', {
        [p1]: { hp: A.hp, field: A.field },
        [p2]: { hp: B.hp, field: B.field },
    });
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
    if (A.hp <= 0 || B.hp <= 0) {
        const winner = A.hp > B.hp ? p1 : B.hp > A.hp ? p2 : null;
        io.to(sessionId).emit('gameOver', { winner });
        gameStates.delete(sessionId);
        return;
    }
    // –∏–Ω–∞—á–µ ‚Äì –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    state.round++;
    // +5 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –∏ —Å–±—Ä–æ—Å –ø–æ–ª—è –Ω–∞ —Ä—É–∫—É/–¥–æ—É–ø–∞–∫–æ–≤–∫–∞, –¥–æ–±–æ—Ä –∫–∞—Ä—Ç‚Ä¶
    [p1, p2].forEach((pid) => {
        const pl = state.players[pid];
        pl.crystals += 5;
        // –¥–æ–±–∏—Ä–∞–µ–º –¥–æ 5 –∫–∞—Ä—Ç
        while (pl.hand.length < 5 && pl.deck.length) {
            pl.hand.push(pl.deck.shift());
        }
        // —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –æ –Ω–æ–≤–æ–π —Ä—É–∫–µ –∏ —Ä–µ—Å—É—Ä—Å–∞—Ö
        const sid = socketsByUserId.get(+pid);
        io.to(sid).emit('newRound', {
            hand: pl.hand,
            crystals: pl.crystals,
            deckSize: pl.deck.length,
            round: state.round,
        });
    });
    // —Å—Ç–∞—Ä—Ç —Ö–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    startTurn(sessionId);
}

// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
io.on('connection', (socket) => {
    const { userId, nickname } = socket.user;
    const key = nickname.toLowerCase();
    socketsByNickname.set(key, socket.id);
    // üëâ –°–æ—Ö—Ä–∞–Ω–∏–º –∏ –ø–æ userId
    socketsByUserId.set(userId, socket.id);

    // –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ (–æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å)
    socket.on('change_avatar', async ({ avatar_url }) => {
        try {
            await dbPool.query(
                'UPDATE users SET avatar_url = ? WHERE user_id = ?',
                [avatar_url, userId]
            );
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –ª–µ—Ç—É –≤ –ø–∞–º—è—Ç–∏:
            socket.user.avatar_url = avatar_url;

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
            socket.emit('avatar_updated', { avatar_url });
        } catch (err) {
            console.error('Error when changing avatar:', err);
            socket.emit('avatar_update_error', {
                error: 'Failed to update avatar',
            });
        }
    });

    // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    socket.on('invite', async ({ targetNickname }) => {
        const tkey = targetNickname.trim().toLowerCase();
        const targetSocketId = socketsByNickname.get(tkey);
        console.log(
            `Invite attempt: ${nickname} ‚Üí ${targetNickname} (key="${tkey}") ‚Üí targetSocketId=${targetSocketId}`
        );

        if (!targetSocketId) {
            socket.emit('invite_error', 'User not online');
            return;
        }
        // –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞
        const [[{ avatar_url }]] = await dbPool.query(
            'SELECT avatar_url FROM users WHERE user_id = ?',
            [socket.user.userId]
        );
        io.to(targetSocketId).emit('invite_received', {
            fromUserId: userId,
            fromNickname: nickname,
            fromAvatar: avatar_url,
        });
    });

    socket.on('invite_response', async ({ fromUserId, accept }) => {
        const inviterSocketId = socketsByUserId.get(fromUserId);
        if (!inviterSocketId) return;

        // –°–æ–æ–±—â–∞–µ–º –≤—ã–∑—ã–≤–∞—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–≤–µ—Ç–µ
        io.to(inviterSocketId).emit('invite_response', {
            fromUserId: socket.user.userId,
            fromNickname: socket.user.nickname,
            fromAvatar: socket.user.avatar_url,
            accept,
        });

        if (!accept) return;

        // 1) –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ sessions –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë —á–∏—Å–ª–æ–≤–æ–π ID
        const [res] = await dbPool.query(
            'INSERT INTO sessions (player1_id, player2_id, status) VALUES (?, ?, ?)',
            [fromUserId, socket.user.userId, 'lobby']
        );
        const dbSessionId = res.insertId.toString();

        // 2) –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –æ–±–æ–∏—Ö –≤ –∫–æ–º–Ω–∞—Ç—É —Å –∏–º–µ–Ω–µ–º = —ç—Ç–æ—Ç ID
        const room = dbSessionId.toString();
        sessionPlayers.set(room, [fromUserId, socket.user.userId]);

        socket.join(room);
        io.sockets.sockets.get(inviterSocketId).join(room);
        io.to(room).emit('session_joined', { sessionId: room });
    });

    // –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª READY
    socket.on('player_ready', async ({ sessionId }) => {
        if (!readyMap.has(sessionId)) {
            readyMap.set(sessionId, new Set());
        }
        const set = readyMap.get(sessionId);
        set.add(userId);

        if (set.size === 2) {
            // 1) –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await dbPool.query(
                'UPDATE sessions SET status = ? WHERE session_id = ?',
                ['draft', sessionId]
            );

            // 2) —Ç–∞—â–∏–º 30 –∫–∞—Ä—Ç–æ—á–µ–∫
            const [cards] = await dbPool.query(`
            SELECT card_id AS id, name, image_url, cost, attack, defense
            FROM cards
            ORDER BY RAND()
            LIMIT 30
          `);

            // 3) –¥–æ—Å—Ç–∞—ë–º –∏–∑ map –∏–≥—Ä–æ–∫–æ–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            const [p1, p2] = sessionPlayers.get(sessionId);

            // 4) —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä–≤—ã–π —Ö–æ–¥
            const firstPlayerId = Math.random() < 0.5 ? p1 : p2;
            console.log(
                `Emitting draft_update to room ${sessionId} ‚Üí players:`,
                sessionPlayers.get(sessionId)
            );

            // 5) —ç–º–∏—Ç–∏–º —É–∂–µ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É room = sessionId
            io.to(sessionId).emit('start_draft', {
                sessionId,
                cardPool: cards,
                firstPlayerId,
            });
            // —Å–æ—Ö—Ä–∞–Ω–∏–º –¥—Ä–∞—Ñ—Ç-—Å—Ç–µ–π—Ç
            sessionDraftData.set(sessionId, {
                cardPool: cards,
                firstPlayerId,
            });
        }
    });
    socket.on('join_room', async ({ sessionId }) => {
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ë–î —Ç–∞–∫–∞—è —Å–µ—Å—Å–∏—è –µ—â—ë –∞–∫—Ç—É–∞–ª—å–Ω–∞
        const [rows] = await dbPool.query(
            'SELECT status FROM sessions WHERE session_id = ?',
            [sessionId]
        );
        if (rows.length === 0 || !['lobby', 'draft'].includes(rows[0].status)) {
            // —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞/–Ω–µ –≤ –ª–æ–±–±–∏
            socket.emit('invalid_session');
            return;
        }
        socket.join(sessionId);
        console.log(`‚Üí ${socket.user.nickname} re-joined room ${sessionId}`);

        // –µ—Å–ª–∏ –¥—Ä–∞—Ñ—Ç —É–∂–µ –∏–¥—ë—Ç ‚Äî ¬´—Ä–µ–∑—é–º–µ¬ª
        const data = sessionDraftData.get(sessionId);
        if (data) {
            const { cardPool, firstPlayerId } = data;

            // –∑–∞–≥—Ä—É–∑–∏–º —É–∂–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ picks –∏–∑ –ë–î
            const [rows] = await dbPool.query(
                'SELECT player_id AS pickedBy, card_id AS cardId, pick_order FROM deck_cards WHERE session_id = ? ORDER BY pick_order',
                [sessionId]
            );

            // –≤—ã—á–∏—Å–ª–∏–º, –∫—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π
            const turnCount = rows.length;
            const [p1, p2] = sessionPlayers.get(sessionId);
            const nextPlayerId = turnCount % 2 === 0 ? p1 : p2;

            // –æ—Ç–¥–∞–¥–∏–º —ç—Ç–æ–º—É —Å–æ–∫–µ—Ç—É –ø–æ–ª–Ω—ã–π ¬´—Ä–µ–∑—é–º–µ¬ª
            socket.emit('resume_draft', {
                sessionId,
                cardPool,
                firstPlayerId,
                picks: rows.map((r) => ({
                    pickedBy: r.pickedBy,
                    cardId: r.cardId,
                })),
                nextPlayerId,
            });
        }
    });

    // –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏ sessionId
    socket.on('leave_room', ({ sessionId }) => {
        // –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        socket.leave(sessionId);
        // –≥–æ–≤–æ—Ä–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤ –∫–æ–º–Ω–∞—Ç–µ, —á—Ç–æ –º—ã –≤—ã—à–ª–∏
        socket
            .to(sessionId)
            .emit('opponent_left', { userId: socket.user.userId });
    });

    socket.on('disconnect', () => {
        socketsByNickname.delete(key);
        console.log(`‚Üê ${nickname} disconnected`);
    });
    socket.on('draft_pick', async ({ sessionId, cardId }) => {
        const me = socket.user.userId;
        const [p1, p2] = sessionPlayers.get(sessionId);
        // 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        const turnCount = await dbPool
            .query(
                'SELECT COUNT(*) AS cnt FROM deck_cards WHERE session_id = ?',
                [sessionId]
            )
            .then((r) => r[0][0].cnt);
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É —Ö–æ–¥: –µ—Å–ª–∏ turnCount —á—ë—Ç–Ω–æ ‚Äî –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫, –∏–Ω–∞—á–µ –≤—Ç–æ—Ä–æ–π
        const isFirstTurn = turnCount % 2 === 0;
        const expectedPlayer = isFirstTurn ? p1 : p2;
        if (me !== expectedPlayer) return;

        // 2) –í—ã—á–∏—Å–ª—è–µ–º pick_order –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        const myCnt = await dbPool
            .query(
                'SELECT COUNT(*) AS cnt FROM deck_cards WHERE session_id = ? AND player_id = ?',
                [sessionId, me]
            )
            .then((r) => r[0][0].cnt);
        const pickOrder = myCnt + 1;

        // 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await dbPool.query(
            'INSERT INTO deck_cards (session_id, player_id, card_id, pick_order) VALUES (?, ?, ?, ?)',
            [sessionId, me, cardId, pickOrder]
        );

        // 4) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ
        const nextPlayer = isFirstTurn ? p2 : p1;

        // 5) –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        io.to(sessionId).emit('draft_update', {
            pickedBy: me,
            cardId,
            nextPlayerId: nextPlayer,
        });

        // 6) –ï—Å–ª–∏ –æ–±–∞ –Ω–∞–±—Ä–∞–ª–∏ –ø–æ 15 ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º
        const totalP1 = await dbPool
            .query(
                'SELECT COUNT(*) AS cnt FROM deck_cards WHERE session_id = ? AND player_id = ?',
                [sessionId, p1]
            )
            .then((r) => r[0][0].cnt);
        const totalP2 = await dbPool
            .query(
                'SELECT COUNT(*) AS cnt FROM deck_cards WHERE session_id = ? AND player_id = ?',
                [sessionId, p2]
            )
            .then((r) => r[0][0].cnt);
        if (totalP1 === 15 && totalP2 === 15) {
            // 1) –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ—Å—Å–∏—é –≤ —ç—Ç–∞–ø "battle"
            await dbPool.query(
                'UPDATE sessions SET status = ? WHERE session_id = ?',
                ['battle', sessionId]
            );

            // 2) –æ–ø–æ–≤–µ—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥—Ä–∞—Ñ—Ç–∞
            io.to(sessionId).emit('draft_complete');
        }
    });
    socket.on('join_game', async ({ sessionId }) => {
        // 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ battle
        const [[sess]] = await dbPool.query(
            'SELECT status, player1_id, player2_id FROM sessions WHERE session_id = ?',
            [sessionId]
        );
        if (!sess || sess.status !== 'battle') {
            return socket.emit('invalid_game');
        }
        // **1.5) –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–æ–∫–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç—É**
        socket.join(sessionId);

        // 2) –≤—ã—Ç—è–≥–∏–≤–∞–µ–º picks –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞
        const [rows] = await dbPool.query(
            `
            SELECT dc.player_id AS playerId,
                   c.card_id    AS id,
                   c.image_url,
                   c.cost,
                   c.attack,
                   c.defense
            FROM deck_cards dc
              JOIN cards c ON dc.card_id = c.card_id
            WHERE dc.session_id = ?
            ORDER BY dc.pick_order
          `,
            [sessionId]
        );
        const youId = socket.user.userId;
        const oppId =
            sess.player1_id === youId ? sess.player2_id : sess.player1_id;
        const youCards = rows
            .filter((r) => r.playerId === youId)
            .map((r) => ({
                id: r.id,
                image_url: r.image_url,
                cost: r.cost,
                attack: r.attack,
                defense: r.defense,
            }));
        const oppCards = rows
            .filter((r) => r.playerId !== youId)
            .map((r) => ({
                id: r.id,
                image_url: r.image_url,
                cost: r.cost,
                attack: r.attack,
                defense: r.defense,
            }));

        // 3) –Ω–∞–π–¥—ë–º —Å–æ–∫–µ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ (—á—Ç–æ–±—ã –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –µ–≥–æ nickname/avatar)
        const oppSocketId = socketsByUserId.get(oppId);
        const oppSock = oppSocketId
            ? io.sockets.sockets.get(oppSocketId)
            : null;

        // 1.6) –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –æ–Ω –Ω–∞ –ª–∏–Ω–∏–∏) –≤ —Ç—É –∂–µ –∫–æ–º–Ω–∞—Ç—É
        if (oppSock) {
            oppSock.join(sessionId);
        }
        // 4) –§–æ—Ä–º–∏—Ä—É–µ–º initState –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        const initState = {
            players: {
                [youId]: {
                    hp: 20,
                    crystals: 8,
                    deck: youCards.slice(5),
                    hand: youCards.slice(0, 5),
                    field: [null, null, null, null, null],
                },
                [oppId]: {
                    hp: 20,
                    crystals: 8,
                    deck: oppCards.slice(5),
                    hand: oppCards.slice(0, 5),
                    field: [null, null, null, null, null],
                },
            },
            playersInfo: {
                [youId]: {
                    nickname: socket.user.nickname,
                    avatar: socket.user.avatar_url,
                },
                [oppId]: {
                    nickname: oppSock?.user.nickname,
                    avatar: oppSock?.user.avatar_url,
                },
            },
            currentTurn: Math.random() < 0.5 ? youId : oppId,
            round: 1,
            turnTimeout: null,
        };
        gameStates.set(sessionId, initState);

        // 5) –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        function makeInitData(you, opp) {
            const { players, playersInfo, round, currentTurn } = initState;
            return {
                yourHand: players[you].hand,
                yourHp: players[you].hp,
                yourCrystals: players[you].crystals,
                yourDeckSize: players[you].deck.length,

                oppHp: players[opp].hp,
                oppHandSize: players[opp].hand.length,
                oppDeckSize: players[opp].deck.length,

                yourNickname: playersInfo[you].nickname,
                yourAvatar: playersInfo[you].avatar,
                oppNickname: playersInfo[opp].nickname,
                oppAvatar: playersInfo[opp].avatar,

                round,
                firstTurn: currentTurn,
            };
        }

        // 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º initGame –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        socket.emit('initGame', makeInitData(youId, oppId));
        if (oppSock) {
            oppSock.emit('initGame', makeInitData(oppId, youId));
        }

        // 7) –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ö–æ–¥
        startTurn(sessionId);
    });

    socket.on('play_card', ({ sessionId, cardId }) => {
        const state = gameStates.get(sessionId);
        if (!state || state.currentTurn !== socket.user.userId) return;
        const me = state.players[socket.user.userId];
        const handIdx = me.hand.findIndex((c) => c.id === cardId);
        if (handIdx < 0 || me.crystals < me.hand[handIdx].cost) return;
        // —Å–Ω–∏–º–∞–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏ —É–±–∏—Ä–∞–µ–º –∏–∑ —Ä—É–∫–∏
        me.crystals -= me.hand[handIdx].cost;
        const card = me.hand.splice(handIdx, 1)[0];
        // –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
        const slot = me.field.findIndex((f) => f === null);
        me.field[slot] = { ...card };
        // –ò –≤–æ—Ç —ç—Ç–æ –û–ß–ï–ù–¨ –≤–∞–∂–Ω–æ:

        io.to(sessionId).emit('cardPlayed', {
            by: socket.user.userId,
            slot,
            card: { id: card.id, image_url: card.image_url },
            crystals: me.crystals,
        });
    });

    // –∏–≥—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ö–æ–¥
    socket.on('end_turn', () => {
        endTurn(socket.handshake.query.sessionId, socket.user.userId);
    });
});

// —Å—Ç–∞—Ä—Ç—É–µ–º
const PORT = process.env.PORT || config.server.port;
server.listen(PORT, () => {
    console.log(`Server listening on http://localhost:${PORT}`);
});
